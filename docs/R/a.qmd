---
title: "**Estad√≠stica para Ling√ºistas**"
subtitle: "Introducci√≥n a R"
author: "Alejandro Correa"
institute: "Maestr√≠a en Ling√º√≠stica | Instituto Caro y Cuervo"
logo: https://www.ugc.edu.co/bogota/templates/yootheme/cache/5b/Logo-horizontal-5b1a0f59.webp
format: html
editor: visual
---

## Resultados de aprendizaje esperados

-   Aprender los elementos b√°sicos de la *sintaxis* de R

-   Aprender a usar *vectores* y tablas en R

-   Aprender a abrir *tablas* y guardarlas en R

-   Aprender a buscar informaci√≥n en R usando *operadores l√≥gicos*

## Caracter√≠sticas de R

-   Es un *entorno de programaci√≥n* (elaborar an√°lisis, desarrollar aplicaciones y programas).

-   Permite la aplicaci√≥n de t√©cnicas de an√°lisis estad√≠stico.

-   Figuras para representar datos con alta calidad y una amplia gama de colores.

-   Tiene una distribuci√≥n gratuita.

-   Tiene una amplia comunidad de usuarios que actualiza el programa, comparte c√≥digo, publica libros, etc√©tera.

Hay un extensa bibliograf√≠a sobre R y la investigaci√≥n ling√º√≠stica.

## 1. Operaciones b√°sicas

### 1.1. R como una calculadora

```{r}
2 + 2 #suma
```

```{r}
218 - 7 #resta
```

```{r, echo = TRUE}
10*2 # multiplicaci√≥n
```

```{r, echo = TRUE}
10/2 # divisi√≥n
```

### 1. 2. Operaciones aritm√©ticas

```{r, echo = TRUE}
4^2 # calcula 4 a la potencia de 2
```

```{r, echo= TRUE}
16 ^(1/2) #calcula la ra√≠z cuadrada de 16
```

```{r}
(459 + 51) / 3 # Suma 51 a 459 y divide el resultado por 3.
459 + (51 / 3) # Suma 459 al resultado de dividir 51 por 3.
```

### 1.3. Asignaci√≥n de variables

Para definir los valores de una variable podemos usar el operador `<-` o el signo igual `=` Yo prefiero el operador `<-` para distinguir r√°pidamente el nombre de mis variables.

```{r}
a <- (459+51)/3
```

```{r}
b = 459+ (51)/3
```

```{r}
a ; b
```

```{r}
a + b
```

## 2. Vectores

Los vectores son conjuntos de datos de una variable. Pueden estar constituidos por caracteres (para variables nominales) o cuantitativas (para variables continuas).

Vectores num√©ricos :

```{r}
n√∫meros <- c(1, 2, 3); n√∫meros
```

Vectores de caracteres:

```{r}
tres.nombres <- c("Camilo", "Andr√©s", "Pedro")
tres.nombres
```

Cuando trabajemos con vectores estamos trabajando con *operaciones* que podemos aplicar al an√°lisis de nuestros datos, que generalmente tenemos organizados en con los casos organizados en filas y las variables en columnas .

Si necesitamos **combinar** dos vectores:

```{r}
n√∫meros1 <- c(1, 2, 3); n√∫meros2 <- c(4, 5, 6)
n√∫meros.y.n√∫meros2 <- c(n√∫meros1,n√∫meros2) # concatena dos vectores
n√∫meros.y.n√∫meros2
```

Lo mismo puede realizarse con la funci√≥n `append`:

```{r}
n√∫meros.y.n√∫meros2 <- append(n√∫meros1,n√∫meros2) # concatena dos vectores
n√∫meros.y.n√∫meros2
```

### 2.1 Extraer elementos 

Tenemos el vector `x`, que est√° constitu√≠do por cinco letras:

```{r}
x <- c("a", "b", "c", "d", "e") 
print(x)
```

Para extraer el tercer elemento del vector `x` :

```{r}
x[3]
```

Otra manera de obtener esta informaci√≥n es asociar el tercer elemento a una variable `y` :

```{r}
y <- 3
```

As√≠ que el tercer elemento del vector `x` es:

```{r}
x[y] 
```

Para crear un vector que **inicie** en 10 y **termine** en 1:

```{r}
x <- c(10:1) 
print(x)
```

Para **buscar** los elementos del vector `x` que equivalen a `4`:

```{r}
x==4
```

Para **buscar** los elementos del vector `x` menores o igual a `7`:

```{r}
x<= 7 
```

Para **buscar** los elementos del vector `x` que no son iguales a `8`:

```{r}
x!=8 # which elements of x are not 8
```

Para **buscar** los elementos del vector `x` que son mayores a `8` y menores a `3`:

```{r}
(x>8 | x<3) # which elements of x are >8 or <3
```

Para **buscar** los elementos que equivalen a 4:

```{r}
sum(x==4) # how many elements in x are 4
```

Para **buscar** el n√∫mero de elementos del vector `x` mayores a 8 o menores a 3:

```{r}
sum(x>8 | x<3) 
```

Para **buscar** cu√°ntos elementos del vector `x`son mayores a 8 o menores a 3:

```{r}
table(x>8 | x<3) 
```

Para **buscar** en qu√© posici√≥n del vector `x` se encuentran los elementos igual a 4:

```{r}
which(x==4)
```

Para **buscar** en qu√© posici√≥n del vector `x` se encuentran los elementos que igual o menores a 7:

```{r}
x;
which(x<=7)
```

Para **buscar** en qu√© posici√≥n del vector `x` se encuentran los elementos diferentes a 8:

```{r}
x;
which(x!=8)
```

## 3. Funciones y argumentos

El programa R funciona con funciones, que son comandos que sirven para realizar tareas (operaciones, mediciones, pruebas estad√≠sticas, etc√©tera) espec√≠ficas. Imaginemos que tomamos los n√∫meros del al 15. Para eso creamos un vector con 15 elementos:

```{r}
some.data <- c(1:15) # or some.data 
```

Supongamos que queremos hacer un sorteo entre 15 compa√±eros: 5 de ellos trabajar√°n el fin de semana. As√≠ que con la funci√≥n `sample` seleccionamos 5 miembros del grupo de manera aleatoria:

```{r}
sample(x=some.data, size=5, replace=TRUE, prob=NULL)
```

Estos tambi√©n podemos hacerlos con los nombres:

```{r}
finde <- c("Alicia", "Carolina","Natalia","Andrea","Abril","Jos√©","Daniel","Abraham","Samuel","Gloria","Eliana","Alejandro","Javier","Miguel","Mariana") 
```

Trabajar√°n el `finde` :

```{r}
sample(x=finde, size=5, replace=FALSE, prob=NULL)
```

Como vemos en la l√≠nea anterior, las funciones tienen argumentos. En los ejemplos anteriores los argumentos son:

-   `x`: una estructura de datos (un vector) con los elementos que se desean muestrear
-   `size`: el tama√±o de la muestra
-   `replace`: si se asigna el argumento `replace = FALSE` cada elemento del vector se puede muestrear una vez (opci√≥n por defecto), pero si el argumento es `replace = TRUE`, los elementos se pueden muestrear varias veces. Esta √∫ltima opci√≥n no sirve para un sorteo.
-   `prob`: la probabilidad de aparici√≥n de los elementos del vector. El valor por defecto es `NULL`, lo cual significa que todos los elementos tienen la misma probabilidad.

(Gries, 2013, p.62)

## Bibliograf√≠a üìö

1.  Gries, Stefan. 2013. *Statistic for linguistics with R. A practical introduction*. Berlin: Mouton de Gruyter.

2.  Levshina, Natalia. 2015. *How to Do Linguistics with R: Data exploration and statistical analysis*. Amsterdam: John Benjamins. Cap√≠tulo 2, pp. 21-40.

3.  Smith, Bridget J., Beckman, Mary E., and Foltz, Anouschka (2016). *Analyzing the sounds of languages*. Ohio State University. Tabla 1, y cap√≠tulo 0. Recuperado de: \[<http://hdl.handle.net/1811/77848%5D>
